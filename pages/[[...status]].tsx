import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useRef } from 'react';

import { initializeApollo } from '../lib/client';
import TaskList from '../components/TaskList';
import TaskForm from '../components/TaskForm';
import {
  TasksDocument,
  TasksQuery,
  TasksQueryVariables,
  TaskStatus,
  useTasksQuery,
} from '../generated/graphql-frontend';
import TaskFilter from '../components/TaskFilter';
import Custom404 from './404';

const isTaskStatus = (value: string): value is TaskStatus =>
  Object.values(TaskStatus).includes(value as TaskStatus);

const Home: NextPage = () => {
  const router = useRouter();
  const status =
    Array.isArray(router.query.status) && router.query.status.length
      ? router.query.status[0]
      : undefined;

  const prevStatus = useRef(status);
  const result = useTasksQuery({
    variables: { status },
    fetchPolicy:
      prevStatus.current === status ? 'cache-first' : 'cache-and-network',
  });
  const tasks = result.data?.tasks;

  useEffect(() => {
    prevStatus.current = status;
  }, [status]);

  if (status !== undefined && !isTaskStatus(status)) {
    return <Custom404 />;
  }

  return (
    <div>
      <Head>
        <title>Next.js Task Mate App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TaskForm onSuccess={result.refetch} />
      {result.loading && !tasks ? (
        <p className="loading">Loading...</p>
      ) : result.error ? (
        <p className="alert-error">ERROR: {result.error.message} </p>
      ) : tasks && tasks.length > 0 ? (
        <TaskList tasks={tasks} />
      ) : (
        <p className="no-tasks-message">No tasks to show!</p>
      )}
      <TaskFilter status={status} />
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const status =
    typeof ctx.params?.status === 'string' ? ctx.params.status : undefined;

  if (status === undefined || isTaskStatus(status)) {
    const apolloClient = initializeApollo();
    await apolloClient.query<TasksQuery, TasksQueryVariables>({
      query: TasksDocument,
      variables: { status },
    });

    return {
      props: {
        initialApolloState: apolloClient.cache.extract(),
      },
    };
  }

  return {
    props: {},
  };
};
